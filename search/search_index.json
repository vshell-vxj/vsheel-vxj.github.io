{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to the vShell website. Click me to get to the guide, or... click me to go to voxj's place.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#welcome-to-the-vshell-website","text":"","title":"Welcome to the vShell website."},{"location":"#click-me-to-get-to-the-guide-or","text":"","title":"Click me to get to the guide, or..."},{"location":"#click-me-to-go-to-voxjs-place","text":"","title":"click me to go to voxj's place."},{"location":"examples/","text":"Examples Example 1 from main import lv # lv is used to find whether the logger (aka devmode) is turned on/off import os try : from colorama import Fore , Style pass except Exception : os . system ( 'python -m pip install colorama' ) os . system ( 'pip install colorama' ) from colorama import Fore , Style pass blue = Fore . BLUE reset = Style . RESET_ALL log = lv () __version__ = \"0.1\" # version of the extension def initialize (): if log == True : print ( f 'Note from { __name__ } .py: You can add a note here!' ) # this note will be shown when logging is set to True, but you can change it just to pass else : pass # when logging is set to False, nothing will happen when the module is initialized def ver (): print ( f ' { blue } SuperExtension v { __version__ }{ reset } ' ) # version of the extension (example, but required) def helpthng (): print ( 'Commands' ) print ( 'help thing - shows this' ) print ( 'ver thing - shows the version of the SuperExtension' ) # the help command is required too def register_commands ( commands ): commands [ 'help thing' ] = helpthng # the thing in commands['thing'] is the name of the command straight in vShell commands [ 'ver thing' ] = ver # and the second one is the function in our extension","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#example-1","text":"from main import lv # lv is used to find whether the logger (aka devmode) is turned on/off import os try : from colorama import Fore , Style pass except Exception : os . system ( 'python -m pip install colorama' ) os . system ( 'pip install colorama' ) from colorama import Fore , Style pass blue = Fore . BLUE reset = Style . RESET_ALL log = lv () __version__ = \"0.1\" # version of the extension def initialize (): if log == True : print ( f 'Note from { __name__ } .py: You can add a note here!' ) # this note will be shown when logging is set to True, but you can change it just to pass else : pass # when logging is set to False, nothing will happen when the module is initialized def ver (): print ( f ' { blue } SuperExtension v { __version__ }{ reset } ' ) # version of the extension (example, but required) def helpthng (): print ( 'Commands' ) print ( 'help thing - shows this' ) print ( 'ver thing - shows the version of the SuperExtension' ) # the help command is required too def register_commands ( commands ): commands [ 'help thing' ] = helpthng # the thing in commands['thing'] is the name of the command straight in vShell commands [ 'ver thing' ] = ver # and the second one is the function in our extension","title":"Example 1"},{"location":"guide/","text":"Guide To begin, import the necessary libraries and initialize the logger (aka devMode): from main import lv import os try : from colorama import Fore , Style pass except Exception : os . system ( 'python -m pip install colorama' ) os . system ( 'pip install colorama' ) from colorama import Fore , Style pass blue = Fore . BLUE reset = Style . RESET_ALL log = lv () Next, define the version number for the extension and create a function to initialize the extension: version = \"0.1\" def initialize (): if log == True : print ( f 'Note from { name } .py: You can add a note here!' ) else : pass Then, create a function to display the version of the extension (REQUIRED!): def ver (): print ( f ' { blue } ext_name v { version }{ reset } ' ) Then create a function to display the available commands for the extension (REQUIRED!): def help_ext_nme (): print ( 'Commands' ) print ( 'help ext_name - shows this' ) print ( 'ver ext_name - shows the version of the extension' ) And finally, register the commands for the extension: def register_commands ( commands ): commands [ 'help ext_name' ] = help_ext_name commands [ 'ver ext_name' ] = ve And that's it! You have created your own extension. You can ask for it to be featured preinstalled by using pull requests .","title":"Guide"},{"location":"guide/#guide","text":"To begin, import the necessary libraries and initialize the logger (aka devMode): from main import lv import os try : from colorama import Fore , Style pass except Exception : os . system ( 'python -m pip install colorama' ) os . system ( 'pip install colorama' ) from colorama import Fore , Style pass blue = Fore . BLUE reset = Style . RESET_ALL log = lv () Next, define the version number for the extension and create a function to initialize the extension: version = \"0.1\" def initialize (): if log == True : print ( f 'Note from { name } .py: You can add a note here!' ) else : pass Then, create a function to display the version of the extension (REQUIRED!): def ver (): print ( f ' { blue } ext_name v { version }{ reset } ' ) Then create a function to display the available commands for the extension (REQUIRED!): def help_ext_nme (): print ( 'Commands' ) print ( 'help ext_name - shows this' ) print ( 'ver ext_name - shows the version of the extension' ) And finally, register the commands for the extension: def register_commands ( commands ): commands [ 'help ext_name' ] = help_ext_name commands [ 'ver ext_name' ] = ve And that's it! You have created your own extension. You can ask for it to be featured preinstalled by using pull requests .","title":"Guide"}]}